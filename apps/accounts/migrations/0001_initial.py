# Generated by Django 2.1 on 2020-09-15 12:29

import django.contrib.auth.models
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("images", "0001_initial"),
        ("auth", "0009_alter_user_last_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated At"),
                ),
                (
                    "user_role",
                    models.IntegerField(
                        choices=[
                            (1, "Admin"),
                            (2, "Subadmin"),
                            (3, "Patient"),
                            (4, "Doctor"),
                        ],
                        default=3,
                        verbose_name="User role",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=70, unique=True, verbose_name="Email"),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="First Name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Last Name"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="Full Name"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="User Name"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=19,
                        null=True,
                        unique=True,
                        verbose_name="Phone Number",
                    ),
                ),
                ("dob", models.DateField(blank=True, null=True)),
                (
                    "address",
                    models.CharField(
                        blank=True,
                        max_length=600,
                        null=True,
                        verbose_name="User address",
                    ),
                ),
                (
                    "lat",
                    models.DecimalField(decimal_places=10, default=0.0, max_digits=15),
                ),
                (
                    "lng",
                    models.DecimalField(decimal_places=10, default=0.0, max_digits=15),
                ),
                (
                    "cordinate",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326, verbose_name="User Cordinate"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="city"
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="state"
                    ),
                ),
                (
                    "zip_code",
                    models.IntegerField(blank=True, null=True, verbose_name="Zip Code"),
                ),
                (
                    "is_email_verified",
                    models.BooleanField(default=False, verbose_name="Email Verified"),
                ),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "is_superuser",
                    models.BooleanField(default=False, verbose_name="SuperUser"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "profile_image",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="images.AllImage",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Users",
                "ordering": ["id"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "city_name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="city_name"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "state_name",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="state_name"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="city",
            name="state_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="state",
                to="accounts.State",
            ),
        ),
    ]
