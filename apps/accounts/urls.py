"""importing django packages and project packages"""
from django.urls import path
from . import views

urlpatterns = [
    path(
        "states",
        views.States.as_view({"get": "list"}),
        name="states",
    ),
    path(
        "cities/<int:state_id>",
        views.Cities.as_view({"get": "list"}),
        name="cities",
    ),
    path("signup", views.SignUp.as_view({"post": "create"}), name="user_signup"),
    path("login", views.Login.as_view({"post": "create"}), name="user_login"),
    path("verifyotp", views.VerifyOTP.as_view({"put": "update"}), name="verify_OTP"),
    path("resendotp", views.ResendOTP.as_view({"post": "create"}), name="resend_otp"),
    path(
        "forgotpassword",
        views.ForgotPassword.as_view({"post": "create"}),
        name="forgot_password",
    ),
    path(
        "resetpassword",
        views.ResetPassword.as_view({"post": "create"}),
        name="reset_password",
    ),
    path(
        "changepassword",
        views.ChangePassword.as_view({"put": "update"}),
        name="change_password",
    ),
    path("myprofile", views.MyProfile.as_view({"get": "list"}), name="my_profile"),
    path("listusers", views.ListUsers.as_view({"get": "list"}), name="list_all_users"),
    path("listdoctors", views.ListDoctors.as_view({"get": "list"}), name="list_doctors"),
    path("listpatients", views.ListPatients.as_view({"get": "list"}), name="list_patients"),
    path(
        "togglestatus",
        views.ToggleStatus.as_view({"put": "update"}),
        name="Toggle is_active Status",
    ),
    path("addhub", views.HubView.as_view({"post": "create"}), name="add_hub"),
    path("hub/<int:hub_id>", views.HubView.as_view({"put": "update"}), name="update hub"),
    path("hubretrive/<int:hub_id>", views.HubRetriveView.as_view({"get": "retrieve"}), name="get hub"),
    path("deletehubs", views.DeleteMultipleHubs.as_view({"put": "update"}), name="delete hubs"),
    path("deletehubdocs/<int:hub_id>", views.DeleteHubDocuments.as_view({"put": "update"}), name="delete hub docs"),
    path("listhubs", views.ListHubs.as_view({"get": "list"}), name="hubs"),
    path("listhubdocs/<int:hub_id>", views.ListHubDocuments.as_view({"get": "retrieve"}), name="list hub documents"),
    path("addroom", views.RoomView.as_view({"post": "create"}), name="add_room"),
    path("room/<int:room_id>", views.RoomView.as_view({"get": "retrieve", "put": "update"}),
         name="get and update room"),
    path("deleterooms/<int:hub_id>", views.DeleteMultipleRooms.as_view({"put": "update"}), name="delete rooms"),
    path("listrooms/<int:hub_id>", views.ListRooms.as_view({"get": "retrieve"}), name="list rooms"),
    path("addvan", views.VanView.as_view({"post": "create"}), name="add_van"),
    path("van/<int:van_id>", views.VanView.as_view({"get": "retrieve", "put": "update"}), name="get and update van"),
    path("deletevans/<int:hub_id>", views.DeleteMultipleVans.as_view({"put": "update"}), name="delete vans"),
    path("listvans/<int:hub_id>", views.ListVans.as_view({"get": "retrieve"}), name="list vans"),
    path('editpatientprofile/<int:patient_id>', views.EditPatientProfile.as_view({"put": "update"}),
         name="update patient"),
    path("addmember/", views.AddMember.as_view({"post": "create"}), name="add family member"),
    path('updatemember/<int:member_id>', views.AddMember.as_view({"put": "update"}), name="update family member"),
    path("deletemember/<int:member_id>", views.DeleteAddMember.as_view({"put": "update"}), name="delete family member"),
    path("addinsurance/", views.InsuranceView.as_view({"post": "create"}), name="add_insurance_details"),
    path("insurance/<int:insurance_id>", views.InsuranceView.as_view({"get": "retrieve", "put": "update"}),
         name="get and update insurance details"),
    path("deleteinsurancedetails/<int:insurance_id>", views.DeleteInsuranceDetails.as_view({"put": "update"}),
         name="delete insurance details"),
    path("listinsurance/", views.ListInsurance.as_view({"get": "list"}), name="insurance"),
    path("addemergencycontact/", views.EmergencyView.as_view({"post": "create"}), name="add_emergency_contacts"),
    path("emergencycontact/<int:emergency_id>", views.EmergencyView.as_view({"get": "retrieve", "put": "update"}),
         name="get and update emergency contacts"),
    path("deleteemergencycontact/<int:emergency_id>", views.DeleteEmergencyContact.as_view({"put": "update"}),
         name="delete emergency contacts"),
    path("tickettable/<int:ticket_id>", views.TicketTable.as_view({"get": "retrieve", "put": "update"}),
         name="get & update ticket"),
    path("tickettable", views.TicketTable.as_view({"post": "create"}), name="add_ticket"),
    path("listtickets", views.ListTickets.as_view({"get": "list"}), name="tickets"),
    path("deletetickets", views.DeleteMultipleTickets.as_view({"put": "update"}), name="delete tickets"),
    path("addvirtualroom", views.VirtualRoomView.as_view({"post": "create"}), name="add virtual room"),
    path("virtualroom/<int:virtualroom_id>", views.VirtualRoomView.as_view({"get": "retrieve", "put": "update"}),
         name="get and update virtual room"),
    path("deletevirtualrooms/<int:hub_id>", views.DeleteMultipleVirtualRooms.as_view({"put": "update"}),
         name="delete virtual rooms"),
    path("listvirtualrooms/<int:hub_id>", views.ListVirtualRooms.as_view({"get": "retrieve"}),
         name="list virtual rooms"),
    path('editdoctorprofile/<int:doctor_id>', views.EditDoctorProfile.as_view({"put": "update"}),
         name="update doctor profile"),

    path("addhistory/", views.AddHistory.as_view({"post": "create"}), name="add medical history"),
    path("listmember/", views.ListMember.as_view({"get": "list"}), name="member"),
    path("listcontact/", views.ListEmergencyContact.as_view({"get": "list"}), name="contact"),
    path("getdocratinginfo/<int:doctor_id>", views.GetDocRatingInfo.as_view({"get": "retrieve"}), name="retrieve doc"),
    path('editadminprofile/<int:admin_id>', views.AdminUpdate.as_view({"put": "update"}), name="update admin"),
    path('createupdaterating', views.Rating.as_view({"put": "update"}), name="update rating"),
    path("addcontentmanagement/", views.ContentManagementCreateUpdate.as_view({"post": "create"}),
         name="add_content_management"),
    path('updatecontentmanagement/', views.ContentManagementCreateUpdate.as_view({"put": "update"}),
         name="update content management"),
    path("getcminfo/<int:cm_id>", views.GetCMInfo.as_view({"get": "retrieve"}), name="retrieve cm"),
    path('updatehistory/', views.AddHistory.as_view({"put": "update"}), name="update medical history"),
    path("listmedicalhistory/", views.ListMedicalHistoryOfPatient.as_view({"get": "retrieve"}),
         name="list medical history"),
    path("getawskeys/", views.GetAWSKey.as_view({"post": "create"}), name="Post API keys"),

    path('editdoctorinfo', views.EditDoctorInfo.as_view({"put": "update"}), name="update doctor"),
    path("verifydoctordoc/<int:user_id>", views.VerifyDoctorDoc.as_view({"put": "update"}), name="verify_Doctor_Info"),
    path("deletemedicaldocs", views.DeleteDocMedicalDocuments.as_view({"put": "update"}), name="delete medical docs"),
    path("gettempdotprinfo/<int:doctor_id>", views.GetTempTableDoctorInfo.as_view({"get": "retrieve"}),
         name="retrieve temp doc"),
    path("createsymptoms/", views.SymptomsBooking.as_view({"post": "create"}), name="create symptoms"),
    path("retrivesymptoms", views.SymptomsBooking.as_view({"get": "retrieve"}), name="retrieve symptoms"),
    path('updatesymptoms/', views.SymptomsBooking.as_view({"put": "update"}), name="update symptoms"),

    path(
        "medicalhistoryitems",
        views.MedicalHistoryItemsView.as_view({"get": "list"}),
        name="medicalhistoryitems",
    ),
    path(
        "symptomsitems",
        views.SymptomAllView.as_view({"get": "list"}),
        name="symptomsitems",
    ),
    path("createvisit", views.Requestvisit.as_view({"post": "create"}), name="create visit"),
    path("updatevisit/<int:booking_id>", views.Requestvisit.as_view({"put": "update"}), name="Update Booking"),
    path("createdoctorassign", views.DoctorAssignDayWise.as_view({"post": "create"}), name="assign doctor"),
    path("updatedoctorassign/<int:doctorassigned_id>", views.DoctorAssignDayWise.as_view({"put": "update"}),
         name="Update Assigned Doctor"),
    path("listdoctorassigndaily", views.ListDoctorAssignDaily.as_view({"get": "list"}), name="list assigned doctors"),
    path("allvisits/", views.AllVisits.as_view({"get": "list"}), name="list all visits ."),
    path('getnearesthub', views.NearestHubGetter.as_view({"get": "retrieve"}), name="nearest hub"),
    path("insuranceverify/<int:booking_id>", views.InsuranceVerify.as_view({"put": "update"}), name="Verify Insurance"),
    path("booknowlater/<int:booking_id>", views.BookNowLaterVisit.as_view({"put": "update"}), name="book now update"),
    path("booknowstartendtime/<int:booking_id>", views.BookNowStartEndTime.as_view({"put": "update"}),
         name="book now start end time"),
    path("bookingmeddisclosure/<int:booking_id>", views.BookingMedicalDisclosure.as_view({"put": "update"}),
         name="med disclosure"),
    # path("meetlink/<int:booking_id>", views.MeetingLinkBooking.as_view({"put": "update"}), name="meetlink"),
    path("cancelbooking/<int:booking_id>", views.CancelBooking.as_view({"put": "update"}), name="book deduct update"),
    path("copaybooking/<int:booking_id>", views.CoPayBooking.as_view({"put": "update"}), name="co_pay booking"),
    # list of booking accordingly
    path("patientvisits", views.PatientVisits.as_view({"get": "list"}), name="list of visits"),
    path("patientupcomingcountvisits", views.PatientUpcomingCountVisits.as_view({"get": "list"}),
         name="list visits counts"),
    path("hubvisitbookings/", views.AdminHubVisitBookings.as_view({"get": "list"}), name="list hub visits"),
    path("mobdocbookings/", views.AdminMobDocBookings.as_view({"get": "list"}), name="list mobdoc visits"),
    path("videoconbookings/", views.AdminVideoConBookings.as_view({"get": "list"}), name="list video visits"),
    path("retrivebooking", views.RetriveBooking.as_view({"get": "retrieve"}), name="retrive boooking"),
    path("doctorhubvisitbookings/", views.DoctorHubVisitBookings.as_view({"get": "list"}),
         name="list doctor hub visits"),
    path("doctormobdocbookings/", views.DoctorMobDocBookings.as_view({"get": "list"}),
         name="list doctor mobile visits"),
    path("doctorvideoconbookings/", views.DoctorVideoConBookings.as_view({"get": "list"}),
         name="list doctor video visits"),
    path("overallvisit/", views.OverAllVisits.as_view({"get": "list"}), name="list overall visits"),
    path("getcmbooking", views.GetCMInfoForBooking.as_view({"get": "retrieve"}), name="booking cm"),
    # Staff Management
    path("subadminsignup", views.SubAdminSignUp.as_view({"post": "create"}), name="subadmin signup"),
    path("subadminactdeact/<int:subadmin_id>", views.SubAdminActDeactAcc.as_view({"put": "update"}),
         name="activate subadmin"),
    path("subadminretrive/<int:subadmin_id>", views.SubAdminSignUp.as_view({"get": "retrieve"}),
         name="retrive subadmin"),
    path("subadminlist", views.ListSubAdmin.as_view({"get": "list"}), name="list subadmin"),
    path("staffdelete", views.Deletestaff.as_view({"put": "update"}), name="delete staff"),

    # Role Management
    path("rolemanagecreate", views.RoleManagement.as_view({"post": "create"}), name="role create"),
    path("rolemanageupdateget/<int:role_id>", views.RoleManagement.as_view({"get": "retrieve", "put": "update"}),
         name="update and get role"),
    path("rolemanagedelete", views.DeleteRoleManagement.as_view({"put": "update"}), name="delete role"),
    path("listrolemanagement", views.ListRoleManagement.as_view({"get": "list"}), name="list role"),
    path("rolemanageupdateget", views.SubAdminSignUp.as_view({"put": "update"}), name="update subadmin role"),

    path("availableslotsvideohub", views.AvailableSlotsVideoHub.as_view({"get": "retrieve"}), name="retrive slots"),
    path("availableslotsmobdoc", views.AvailableSlotsMobDoc.as_view({"get": "retrieve"}), name="retrive slots"),
    path("adminupdatebooking/<int:booking_id>", views.AdminUpdateBooking.as_view({"put": "update"}),
         name="update booking admin"),
    path("adminlistratings", views.AdminListRatings.as_view({"get": "list"}), name="list admin rating"),
    path("deletemultiplereviews", views.DeleteMultipleReviews.as_view({"put": "update"}), name="delete reviews"),
    path("patientdoctoradminbooking", views.PatientDoctorAdminBooking.as_view({"get": "list"}),
         name="list pat doc booking"),
    path("dashboardinfo", views.DashboardInfo.as_view(), name="count data"),
    path("dashboardcharts", views.DashboardCharts.as_view(), name="chart data"),
    path("retrievepatientinfo", views.RetrievePatientInfo.as_view({"get": "retrieve"}), name="request patient detail"),

    path("doctorcompletevisit/<int:booking_id>", views.DoctorFinalApproveVisitBooking.as_view({"put": "update"}),
         name="update booking state 4"),
    # Admin payment management
    path("designationamount", views.DesignationAmount.as_view({"post": "create"}), name="create designation amount"),
    path("designationamountlist", views.DesignationAmountList.as_view({"get": "list"}), name="list designation amount"),
    path("perdaypaymentlist", views.PerDayPaymentList.as_view({"get": "list"}), name="list PerDay payment"),
    path("perdaypaymentupdate/<int:paymanagement_id>", views.PerDayPaymentToDoctors.as_view({"put": "update"}),
         name="update payment management"),
    path("doctormonthlypayment", views.AmountPaidToDoctorMonthly.as_view({"get": "retrieve"}),
         name="monthly amount PM"),
    path("ispaidupdate", views.IsPaidPaymentToDoctors.as_view({"put": "update"}),
         name="update is_paid"),
    path("ispaidcheck", views.CheckIsPaidMontlyRetrieve.as_view({"get": "retrieve"}),
         name="is_paid PM"),
    # dynamic shift
    path("shift", views.ShiftManagement.as_view({"put": "update", "post": "create"}),
         name="shift management"),
    path("deleteshift", views.DeleteShiftManagement.as_view({"put": "update"}),
         name="delete shift management"),
    path("listshift", views.ListShiftManagement.as_view({"get": "list"}),
         name="list shift management"),
    path("updatemedhisvisit/<int:booking_id>", views.BookingUpdateMedicalHistory.as_view({"put": "update"}),
         name="Update Booking"),
    # Admin insurance verification
    path("insuranceverification/<int:insurance_id>", views.UpdateInsuranceVerification.as_view({"put": "update"}),
         name="Update insurance verification"),
    path("listinsuranceverification", views.ListInsuranceVerification.as_view({"get": "list"}),
         name="list insurance verification"),

    path("holdaveragetime", views.AvgHoldHandledTimeInsuranceVerify.as_view({"get": "retrieve"}),
         name="retrieve insurance hold avg time"),
    # list on admin side for verification of doctors
    path("doctorslist", views.ListDoctorAccountVerification.as_view({"get": "list"}),
         name="list doctor insurance verification"),
    path('doctorsdelete', views.DeleteDoctorAccountVerification.as_view({"put": "update"}),
         name="delete doctor verification"),
    path('insurancedelete', views.DeleteInsuranceAdminVerification.as_view({"put": "update"}),
         name="delete insurance verification"),

    path("doctorspayment", views.DoctorAppPerDayPaymentList.as_view({"get": "list"}),
         name="list doctor app payment"),

    path("doctoravailablility", views.DoctorAvailablability.as_view({"post": "create"}),
         name="create doctor availability"),
    path("temptabledoctor", views.ListTempTableWorkInfo.as_view({"get": "list"}),
         name="list temp insurance verification"),
    path("insurancenewrequest", views.GetInsuranceVerificationCount.as_view({"get": "retrieve"}),
         name="insurance new request"),
    path("deletedoctorassigndaily", views.DeleteDoctorAssignDaily.as_view({"put": "update"}),
         name="delete doctor assign"),
    path("bookingratingupdate/<int:booking_id>", views.BookingRatingUpdate.as_view({"put": "update"}),
         name="booking rating update"),
    path("listbookinghubwise", views.ListBookingHubWise.as_view({"get": "list"}),
         name="list booking"),
    path("listdoctorbooking", views.ListDoctorAppParticularDayBookings.as_view({"get": "list"}),
         name="list doctor booking"),
    path("doctorupcomingvisit", views.DoctorCalenderUpcomingVisits.as_view({"get": "list"}),
         name="list doctor upcoming"),
    path("bookingdoctordatewise", views.BookingDoctorDateWise.as_view({"get": "list"}), name="list doctor date wise"),
    path("retrieveinsverify", views.RetrieveInsuranceVerification.as_view({"get": "retrieve"}),
         name="retrieve insurance verification"),
    path("doctoravailability", views.ListDoctorAvaialbility.as_view({"get": "list"}), name="list doctor availability"),
    path("bookingextendtime", views.BookingExtendTime.as_view({"put": "update"}),
         name="extend booking time"),

    # dynamic shift repercussions-
    path("createdoctorassignds", views.DoctorAssignDayWiseDS.as_view({"post": "create"}), name="assign doctor"),
    path("updatedoctorassignds/<int:doctorassigned_id>", views.DoctorAssignDayWiseDS.as_view({"put": "update"}),
         name="Update Assigned Doctor"),

    # availability of slots according to dynamic shift
    path("slotsvideohub", views.AvailableSlotsVideoHubDS.as_view({"get": "retrieve"}), name="get slots"),
    path("slotsmobdoc", views.AvailableSlotsMobDocDS.as_view({"get": "retrieve"}), name="get slots"),

    path("bookingupdateds/<int:booking_id>", views.BookNowLaterVisitDS.as_view({"put": "update"}),
         name="booking update"),

    path('editdoctorinfods', views.EditDoctorInfoDS.as_view({"put": "update"}), name="update doctor"),
    path("verifydoctordocds/<int:user_id>", views.VerifyDoctorDocDS.as_view({"put": "update"}),
         name="verify_Doctor_Info"),
    path("insuranceforadmin", views.RetrieveInsuranceFromBooking.as_view({"get": "retrieve"}),
         name="retrieve insurance details"),

    path("doctorassignvisit/<int:booking_id>", views.TempDocToDoctorVisit.as_view({"put": "update"}),
         name="booking update"),
]
